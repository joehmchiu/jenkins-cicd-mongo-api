<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="172" hostname="9002fd428f35" name="pytest" skipped="0" tests="250" time="4.234" timestamp="2021-07-25T11:24:59.209642"><testcase classname="test.test_crud" name="test_equal[Create-failed0]" time="0.009"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed0]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed0]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed1]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed0]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed1]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed1]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed2]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed3]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed1]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok0]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed2]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed5]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed2]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed2]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok0]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed6]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed7]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed3]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed3]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed3]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok0]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed8]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok0]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok1]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-ok1]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed9]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok1]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed10]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed11]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok1]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Create-failed5]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed5]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed12]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed13]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok2]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-ok2]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok2]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-ok2]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed14]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed5]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed6]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed6]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed15]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed16]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed6]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok3]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-ok3]" time="0.008" /><testcase classname="test.test_crud" name="test_equal[Update-failed17]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed18]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed7]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed7]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed7]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed19]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed20]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed8]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed8]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok4]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-ok3]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-failed21]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed9]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok4]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed8]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok4]" time="0.009" /><testcase classname="test.test_crud" name="test_equal[Update-failed22]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed10]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed9]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed9]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed23]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed24]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok3]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Create-ok5]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-failed10]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok5]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-failed25]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok4]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Create-failed10]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok5]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed26]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed27]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok5]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-failed11]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed11]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed28]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed29]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok6]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Create-failed12]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed12]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed30]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed31]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed11]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok6]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Read-failed13]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed32]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed33]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok7]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-ok7]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed14]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed34]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed35]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed12]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed13]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok6]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-ok6]" time="0.006" /><testcase classname="test.test_crud" name="test_equal[Update-failed36]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed13]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok8]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-failed15]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed37]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed38]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok8]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-ok9]" time="0.010" /><testcase classname="test.test_crud" name="test_equal[Read-failed16]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed39]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed40]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed14]" time="0.008"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok10]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Read-failed17]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok7]" time="0.007" /><testcase classname="test.test_crud" name="test_equal[Update-failed41]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed15]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed14]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed18]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed42]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed43]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed16]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed15]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed19]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed44]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed45]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed17]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok11]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-failed20]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed46]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed47]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed18]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok12]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok7]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-failed48]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed49]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok9]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-failed16]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed21]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed50]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed51]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok10]" time="0.010" /><testcase classname="test.test_crud" name="test_equal[Create-ok13]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Read-failed22]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok8]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed52]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed19]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok14]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Read-ok8]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-ok9]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-failed53]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok11]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Create-failed17]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok9]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed54]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed55]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok12]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-failed18]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed23]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed56]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed57]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed20]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed19]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed24]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed58]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed59]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed21]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed20]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed25]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok10]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed60]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok13]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Create-ok15]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok10]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed61]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed62]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok14]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-failed21]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed26]" time="0.008"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok11]" time="0.008" /><testcase classname="test.test_crud" name="test_equal[Update-failed63]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed22]" time="0.007"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok16]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-ok11]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-failed64]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed65]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok15]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Create-failed22]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok12]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-ok12]" time="0.005" /><testcase classname="test.test_crud" name="test_equal[Update-failed66]" time="0.015"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed23]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok17]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-failed27]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok13]" time="0.005" /><testcase classname="test.test_crud" name="test_equal[Update-failed67]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed24]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok18]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-ok13]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-failed68]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed69]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed25]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed23]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed28]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-ok14]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-failed70]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok16]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Create-failed24]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-failed29]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed71]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed72]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed26]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok19]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed30]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed73]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed74]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed27]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok20]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Read-failed31]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed75]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed76]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed28]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-ok21]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok14]" time="0.002" /><testcase classname="test.test_crud" name="test_equal[Update-ok15]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed77]" time="0.009"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok17]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Create-ok22]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok15]" time="0.004" /><testcase classname="test.test_crud" name="test_equal[Update-failed78]" time="0.008"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed79]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-ok18]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Create-ok23]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Read-ok16]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-ok16]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed80]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed29]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Create-failed25]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Create', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Read-ok17]" time="0.003" /><testcase classname="test.test_crud" name="test_equal[Update-failed81]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Update-failed82]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase><testcase classname="test.test_crud" name="test_equal[Delete-failed30]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Delete', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_equal(key, val):
&gt;       assert val == 'ok'
E       AssertionError: assert 'failed' == 'ok'
E         - ok
E         + failed

test/test_crud.py:21: AssertionError</failure></testcase></testsuite></testsuites>