<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="61" hostname="9002fd428f35" name="pytest" skipped="64" tests="200" time="3.138" timestamp="2021-07-25T13:48:34.354853"><testcase classname="test.test_result" name="test_result[Create-skip0]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok0]" time="0.005" /><testcase classname="test.test_result" name="test_result[Update-ok0]" time="0.005" /><testcase classname="test.test_result" name="test_result[Delete-ok0]" time="0.005" /><testcase classname="test.test_result" name="test_result[Create-ok0]" time="0.004" /><testcase classname="test.test_result" name="test_result[Read-failed0]" time="0.012"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed0]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip0]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip1]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed1]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed1]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip1]" time="0.005"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok1]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-failed2]" time="0.009"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed2]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok1]" time="0.005" /><testcase classname="test.test_result" name="test_result[Create-ok2]" time="0.009" /><testcase classname="test.test_result" name="test_result[Read-failed3]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed3]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok2]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip2]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed4]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip2]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok3]" time="0.004" /><testcase classname="test.test_result" name="test_result[Read-failed5]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed5]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip3]" time="0.005"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok4]" time="0.006" /><testcase classname="test.test_result" name="test_result[Read-ok1]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-ok1]" time="0.004" /><testcase classname="test.test_result" name="test_result[Delete-ok3]" time="0.002" /><testcase classname="test.test_result" name="test_result[Create-ok5]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-failed6]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed6]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok4]" time="0.012" /><testcase classname="test.test_result" name="test_result[Create-ok6]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-failed7]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed7]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip4]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip3]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed8]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok2]" time="0.006" /><testcase classname="test.test_result" name="test_result[Delete-skip5]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip4]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok2]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-ok3]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-ok5]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip5]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed9]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed8]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok6]" time="0.002" /><testcase classname="test.test_result" name="test_result[Create-ok7]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-ok3]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-ok4]" time="0.002" /><testcase classname="test.test_result" name="test_result[Delete-skip6]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip6]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed10]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed9]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip7]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip7]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok4]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-ok5]" time="0.004" /><testcase classname="test.test_result" name="test_result[Delete-ok7]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip8]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok5]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-failed10]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip8]" time="0.005"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip9]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok6]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-failed11]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok8]" time="0.004" /><testcase classname="test.test_result" name="test_result[Create-skip10]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok7]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-failed12]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip9]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok8]" time="0.002" /><testcase classname="test.test_result" name="test_result[Read-ok8]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-failed13]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip10]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip11]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed11]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok6]" time="0.002" /><testcase classname="test.test_result" name="test_result[Delete-ok9]" time="0.004" /><testcase classname="test.test_result" name="test_result[Create-skip12]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok9]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-ok7]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-skip11]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip13]" time="0.005"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed12]" time="0.008"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed14]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip12]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip14]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed13]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed15]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip13]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok9]" time="0.009" /><testcase classname="test.test_result" name="test_result[Read-failed14]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok8]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-skip14]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip15]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed15]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok9]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-ok10]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip16]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed16]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed16]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip15]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok10]" time="0.002" /><testcase classname="test.test_result" name="test_result[Read-failed17]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed17]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip16]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok11]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-failed18]" time="0.005"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok10]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-skip17]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip17]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok10]" time="0.010" /><testcase classname="test.test_result" name="test_result[Update-failed18]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok11]" time="0.005" /><testcase classname="test.test_result" name="test_result[Create-skip18]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok11]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-failed19]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip18]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip19]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok12]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-failed20]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip19]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok12]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-failed19]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed21]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip20]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip20]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok13]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-ok11]" time="0.002" /><testcase classname="test.test_result" name="test_result[Delete-skip21]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok13]" time="0.004" /><testcase classname="test.test_result" name="test_result[Read-failed20]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed22]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip22]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip21]" time="0.002"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed21]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed23]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip23]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip22]" time="0.037"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed22]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed24]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip24]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok14]" time="0.004" /><testcase classname="test.test_result" name="test_result[Read-ok14]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-ok12]" time="0.003" /><testcase classname="test.test_result" name="test_result[Delete-ok12]" time="0.005" /><testcase classname="test.test_result" name="test_result[Create-skip23]" time="0.007"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok15]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-failed25]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip25]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip24]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed23]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok13]" time="0.002" /><testcase classname="test.test_result" name="test_result[Delete-skip26]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip25]" time="0.005"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok16]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-ok14]" time="0.004" /><testcase classname="test.test_result" name="test_result[Delete-skip27]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip26]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed24]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok15]" time="0.005" /><testcase classname="test.test_result" name="test_result[Delete-ok13]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-ok15]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-ok17]" time="0.005" /><testcase classname="test.test_result" name="test_result[Update-failed26]" time="0.002"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip28]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip27]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok18]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-failed27]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok14]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip28]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok19]" time="0.003" /><testcase classname="test.test_result" name="test_result[Update-failed28]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip29]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-ok16]" time="0.003" /><testcase classname="test.test_result" name="test_result[Read-ok20]" time="0.002" /><testcase classname="test.test_result" name="test_result[Update-failed29]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok15]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip29]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed25]" time="0.004"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed30]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-skip30]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Create-skip30]" time="0.004"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-ok21]" time="0.004" /><testcase classname="test.test_result" name="test_result[Update-failed31]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok16]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-skip31]" time="0.003"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase><testcase classname="test.test_result" name="test_result[Read-failed26]" time="0.003"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-failed32]" time="0.006"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Update', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Delete-ok17]" time="0.003" /><testcase classname="test.test_result" name="test_result[Create-ok17]" time="0.004" /><testcase classname="test.test_result" name="test_result[Read-failed27]" time="0.013"><failure message="AssertionError: assert 'failed' == 'ok'&#10;  - ok&#10;  + failed">key = 'Read', val = 'failed'

    @pytest.mark.parametrize(
        "key,val",
        arr,
    )
    def test_result(key, val):
        if val == 'skip':
            pytest.skip('skip test')
        else:
&gt;           assert val == 'ok'
E           AssertionError: assert 'failed' == 'ok'
E             - ok
E             + failed

test/test_result.py:24: AssertionError</failure></testcase><testcase classname="test.test_result" name="test_result[Update-ok16]" time="0.006" /><testcase classname="test.test_result" name="test_result[Delete-skip31]" time="0.006"><skipped message="skip test" type="pytest.skip">/var/lib/jenkins/jobs/Jenkins CICD Mongo API/workspace/test/test_result.py:22: skip test</skipped></testcase></testsuite></testsuites>